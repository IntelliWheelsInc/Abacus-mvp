Abacus Project
Intelliwheels 2015

Services Documentation

-------------------------------------------------------------------------

Change Log:
5/14/15 - Scott Blessing - Created File

-------------------------------------------------------------------------

This documentation will cover all of the SERVICES (Static Facories), FACTORIES, and CONSTANTS used in the Abacus project.  For this project, we have been using a "Factories as Objects" methodology.  What this means is that each Factory can be considered the same as a Java object.  The Services all work as a collection of global variables and methods.  Constants are self-explainitory.

-------------------------------------------------------------------------

Contents:
1) Factories
1a) Color
1b) Option
1c) Part
1d) Measure
1e) Frame
1f) Wheelchair
1g) PreviewImage
1h) Order

2) Services (Static Factories)
2a) FrameData
2b) User
2c) Unit
2d) Angle
2e) SyncJSON

3) Constants
3a) Cost
3b) Bank

-------------------------------------------------------------------------

1a) Color (colorFactory.js)

A Color is an available color for an Option.  Color contains an ID, a name, and a hex value stored as a string in the format "#000000".  Once created, Colors should not be modified - only accessed.

-------------------------------------------------------------------------

1b) Option (optionFactory.js)

An Option is an available Option for a Part.  For example, if a Part is the backrest, then it's options would be carbon fiber, plastic, or upholstery.  Options contain an ID, a name, an image, weight (in lbs), price (in USD), details, an array of Color objects, and a default color.  Once an option is created, it should not be modified - only accessed.

-------------------------------------------------------------------------

1c) Part (partFactory.js)

A Part is an available part for a Frame.  Parts include Backrest, Wheel, Handrail, etc.  Parts contain an ID, a name, an array of Options, and a default Option.  Once a Part is created, it should not be modified - only accessed.

Parts also contain two fields used in the construction of the Preview Image: NumSubImages and ZRank.  NumSubImages is the number of images this part will contribute to the full generated image.  For example, if the Part is wheels, each wheel will be it's own layer in the image.  Thus, the wheels Part will have NumSubImages as 2.  If the part doesn't contribute to the image at all, then NumSubImages will be 0.

ZRank is a 2D array of z layer rankings used to order the images.  The first index is the subimage.  The second index is the angle.  The higher zRanking images get put in front.

--------------------------------------------------------------------------

1d) Measure (measureFactory.js)

A Measure is a measurement that needs to be taken for a Frame.  Measurements incldue back seat height, wheel radius, seat depth, etc.  Each Measure has an ID, a name, a set of options and their associated weights and prices, and links to relevent media.  Once created, a Measure shouldn't be modified - only accessed.

---------------------------------------------------------------------------

1e) Frame (frameFactory.js)

A Frame is a set of data for a type of wheelchair.  Each Frame contains both an array of Parts and Measures.  Frames also have an ID, name, manufacturer, weight, price, and image.  Once created, a Frame shouldn't be modified - only accessed.

---------------------------------------------------------------------------

1f) Wheelchair (wheelchairFactory.js)

A Wheelchair is a design generated by the user.  When the user chooses a frame on the Frames page, a new Wheelchair object is created.  Given the chosen frame, the wheelchair creates two arrays to track chosen options, colors, and measureOptions.  The Wheelchair then sets these to their default values.  As the user modifies their design on the abacus page, the wheelchair object gets modified.  This class has various methods for modifying its values as well as getting aggregate results such as total weight and total price.  The Wheelchair object does not contain direct references to Frame, Part, Option, Color, and Measure objects - only their IDs.

----------------------------------------------------------------------------

1g) PreviewImage (previewImageFactory.js)

A PreviewImage is a helper class used by Wheelchair to generate its preview image.  Unless you are modifying how the preview image array is generated, you should always just use Wheelchair.getPreviewImages()

----------------------------------------------------------------------------

1h) Order (orderFactory.js)

An Order is an object that tracks what the user is ordering.  This object contains an array of fully-designed wheelchairs and some aggregate functions regarding them.  Some of these include calculating subtotal, tax, and shipping fee.  In addition, the Order tracks information about the User and the state of the database when it is ordered (since that is subject to change).

Orders also track their sent date, and if an Order doesn't have a sent date, it is considered "unsent".  Whenever the user visits the Cart page [MyDesigns], a new unsent order is created for them.  This Order is then used as the "cart" through the entire ordering process.

----------------------------------------------------------------------------

2a) FrameData (frameDataService.js)

This service generates and keeps track of all the Frames.  When FrameData is first created, it pulls all frame data from the database and creates all of the Frame, Part, Option, Color, and Measure objects.  Accessing these objects should be done through FrameData (unless you already have a reference to a lower object).  If you think of the frame data as a tree, FrameData is the root.

----------------------------------------------------------------------------

2b) User (userService.js)

This service keeps track of the current user's data as well as the user's designs and orders.  The User service will track data whether or not the user is logged in - but will save data to the database if the user is logged in.  Login status can be found by the isLoggedIn() method.  The user service provides login() and logout() methods.

The User service also keeps track of the "currently-being-edited" wheelchair and order (getCurEditWheelchair and getCurEditOrder).  These are used by Abacus and Order pages to track changes made to them.

----------------------------------------------------------------------------

2c) Unit (unitService.js)

This service contains various enums and methods relating to units.  The UnitType enum contains IMPERIAL and METRIC.  The methods take a unit system and return an appropriate factor/string/etc.

----------------------------------------------------------------------------

2d) Angle (angleService.js)

This service contains various enums and methods relating to angles.  This is mostly used by the preview image generator.

----------------------------------------------------------------------------

2e) SyncJSON (syncJSONService.js)

This service provides a function that allows JSON files to be read syncronously rather than asyncronously.

----------------------------------------------------------------------------

3a) Cost (costConstant.js)

Constants relating to costs the user must pay, such as the shipping fee and taxes.

----------------------------------------------------------------------------

3b) Bank (bankConstant.js)

Constants regarding banking information.

