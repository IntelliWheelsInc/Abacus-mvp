'use strict';

var aws = require('aws-sdk'),
    fs = require('fs'),
    zlib = require('zlib'),
    childProcess = require('child_process'),
    log4js = require('log4js'),
    logger = log4js.getLogger('Tinker DB backup'),
    JSONValidation = require('json-validation'),
    nodemailer = require('nodemailer');

var BUCKET = process.env.BACKUP_BUCKET,
    DB_LOGIN = process.env.BACKUP_DB_LOGIN,
    DB_PASSWORD = process.env.BACKUP_DB_PASSWORD,
    ALEMAIL = process.env.BACKUP_ALARM_EMAIL,
    SMTP_LOGIN = process.env.BACKUP_SMTP_LOGIN,
    SMTP_PASSWORD = process.env.BACKUP_SMTP_PASSWORD,
    SMTP_SERVER = process.env.BACKUP_SMTP_SERVER;


if (!DB_LOGIN || !DB_PASSWORD) {
  logger.error('Please specify CloudantDB login and password in BACKUP_DB_LOGIN and BACKUP_DB_PASSWORD environment variables');
  process.exit(1);
}

if (!BUCKET) {
  logger.error('Please specify AWS bucket in BACKUP_BUCKET environment variable');
  process.exit(2);
}

if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {
  logger.error('Please specify AWS credentials in AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables');
  process.exit(3);
}

if (!ALEMAIL) {
  logger.error('Please specify your email in BACKUP_ALARM_EMAIL environment variable');
  process.exit(4);
}

if (!SMTP_LOGIN || !SMTP_PASSWORD || !SMTP_SERVER) {
  logger.warn('BACKUP_SMTP_LOGIN or BACKUP_SMTP_PASSWORD or BACKUP_SMTP_SERVER environment variables not specified. Default values will be used');
}

var dbnames = ['design', 'users', 'orders', 'order_number', 'discounts'],
    todayDate = new Date(),
    today = todayDate.toISOString().substring(0, 10);

//calling backup bash scripts
var readDB = function (database) {
  logger.info('Backing up ' + database + ' database to local file');
  var path = 'backups/' + today + '-' + database + '-backup.json';
  //delete file if exists
  try {
    fs.accessSync(path, fs.F_OK);
    logger.warn('File '+ path + ' exists. Deleting');
    return new Promise((resolve, reject) => {
      fs.unlink(path, function(err) {
        if (err) {
          logger.error('Error while deleting ' + path + ' : ' + err);
          reject(err);
        } else {
          resolve();
        }
      });
    })
    .then(() => {
      return readDB(database);
    });
  } catch (e) {
    return new Promise((resolve, reject) => {childProcess.exec('bash couchdb-backup.sh  -b -H ' + DB_LOGIN + '.cloudant.com -d ' + database + ' -f ' + path + ' -u ' + DB_LOGIN + ' -p ' + DB_PASSWORD,
      function (err, stdout, stderr) {
        if (err) {
          logger.error('Error occuried while reading data from db ' + database + ': ' + err);
        } else {
          fs.readFile(path, (err, data) => {
            if (err) {
              logger.error('Error reading backup file: ' + err);
              reject(err);
            }

            try {
              JSON.parse(data);
              logger.info('Export of ' + database + ' to file completed successfully');
              resolve();
            } catch (err) {
              if (err.message.indexOf('Unexpected token : in JSON at position') > -1) {
                var errPosition = err.message.split(' ')[7],
                    errExample;
                if (errPosition > 1000) {
                  errExample = data.toString().substr(errPosition - 50, 100);
                } else {
                  errExample = data.toString().substr(errPosition - 10, 20);
                }
                logger.error(errExample);
              }
              logger.error(err.message);
              var smtpLogin = (SMTP_LOGIN || 'dbbackupreporter@gmail.com'),
                  smtpPassword = SMTP_PASSWORD || 'kZYGdq3ZfrdhjG9iF8qy',
                  smtpServer = SMTP_SERVER || 'smtp.gmail.com';

              var transporter = nodemailer.createTransport({
                host: smtpServer,
                port: 465,
                secure: true,
                auth: {
                  user: smtpLogin,
                  pass: smtpPassword
                }
              });


              var failureMailText = 'Hello.\n' +
                    'This email is autogenerated, please do not respond to it.\n\n' +
                    'This is to inform you that backup for ' + todayDate.toDateString() +
                    'failed due incorrect JSON document exported from ' + database + ' database.\n' +
                    err.message + '\n' +
                    errExample,
                  failureMailHTML = 'Hello.<br>' +
                        'This email is autogenerated, please do not respond to it.<br><br>' +
                        'This is to inform you that backup for ' + todayDate.toDateString() +
                        ' <b>failed</b> due incorrect JSON document exported from <b>' + database + '</b> database.\n' +
                        '<i>' + err.message + '</i><br>' +
                        '<i>' + errExample + '</i>',
                  mailOptions = {
                    from: '"Tinker DB backup" <' + SMTP_LOGIN + '>', // sender address
                    to: ALEMAIL,
                    subject: database + ' JSON parsing failed',
                    text: failureMailText,
                    html: failureMailHTML
                  };

              // send mail with defined transport object
              transporter.sendMail(mailOptions, function(error, info){
                  if(error){
                    console.log(error);
                    logger.error('Failed reporting to ' + ALEMAIL);
                    logger.error('Please check BACKUP_SMTP_SERVER, BACKUP_SMTP_LOGIN and BACKUP_SMTP_PASSWORD environment variables');
                  } else {
                    logger.warn('This incident had been reported to ' + ALEMAIL);
                    process.exit(3);
                  }
              });
            }
          });
        }
      });});
  }
};

var writeBackupToS3 = function (database) {
  //writing backup file to S3
  logger.info('Writing backup of ' + database + ' to S3');
  var filename = today + '-' + database + '-backup.json';
  var path = 'backups/' + filename;

  var body = fs.createReadStream(path).pipe(zlib.createGzip());
  return new Promise((resolve, reject) => {new aws.S3({params: {Bucket: BUCKET, Key: filename}}).upload({Body: body}).
    on('httpUploadProgress', function(evt) {
      var progress = Math.round(evt.loaded/evt.total*100);
      logger.info('Uploading of ' + filename + ': ' + (progress === 100? (progress + '%'): (progress + '% ...')));
    }).
    send(function(err, data) {
      if (err) {
        logger.error('An error occuried while uploading file: ' + err);
        reject(err);
      }
      fs.unlink(path, function(err) {
        if (err) {
          logger.error('Error while deleting ' + path + ' : ' + err);
          reject(err);
        }
      });
      logger.info('File successfully uploaded at url ' + data.Location);
      resolve();
    });});
  };

var backup = function () {
  dbnames.reduce((prom, database) => {
    return prom
      .then(() => {
        return readDB(database);
      });
  }, Promise.resolve())
    .then(() => {
      return dbnames.reduce((prom, database) => {
        return prom
          .then(() => {
            return writeBackupToS3(database);
          })
          .catch((err) => {
            console.log(err);

          })
      }, Promise.resolve());
    });
};

exports.backup = backup;
